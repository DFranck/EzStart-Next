{
  "app": {
    "meta-title": "EzStart - The Ultimate Boilerplate for Modern Web Development",
    "meta-description": "Jumpstart your web development projects with {meta-title}, a comprehensive and flexible boilerplate. Built with modern technologies and best practices, {meta-title} provides a robust foundation for creating high-performance, scalable web applications. Perfect for developers looking to streamline their workflow and enhance productivity.",
    "locale": {
      "language": { "en": "English", "fr": "French" }
    },
    "theme": {
      "light": "Light",
      "dark": "Dark"
    },
    "errors": {
      "emailRequired": "Email is required.",
      "invalidEmail": "Invalid email address.",
      "passwordRequired": "Password is required.",
      "passwordMin": "Password must be more than 8 characters.",
      "passwordMax": "Password must be less than 32 characters.",
      "userExists": "User already exists.",
      "configuration": "Incorrect email or password.",
      "notfound": "User not found.",
      "passwordsdonotmatch": "Passwords do not match."
    },
    "auth": {
      "sign-in": "Sign In",
      "sign-up": "Sign Up",
      "sign-out": "Sign Out",
      "forms": {
        "or": "or",
        "email-label": "Email",
        "email-placeholder": "Email",
        "password-label": "Password",
        "password-placeholder": "Password",
        "confirm-password-label": "Confirm Password",
        "confirm-password-placeholder": "Confirm Password",

        "sign-in-form": {
          "title": "Sign In to EzStart",
          "subtitle": "Welcome back! Please sign in to continue",
          "forgot-password": "Forgot Password?",
          "no-account": "Don't have an account?"
        },
        "sign-up-form": {
          "title": "Sign Up to EzStart",
          "subtitle": "Welcome! Please fill in the details to get started.",
          "already-have-account": "Already have an account?"
        },
        "forgot-form": {
          "title": "Forgot your password?",
          "subtitle": "Enter your email address and we'll send you a code to reset your password.",
          "back": "Back to Sign In",
          "send": "Get my reset code",
          "no-account": "Don't have an account?"
        },
        "verify-code-form": {
          "title": "Verify Code",
          "subtitle": "Enter the code that was sent to your email.",
          "back": "Back to Sign In",
          "verify": "Verify",
          "resend": "Resend Code",
          "verify-code-label": "Code",
          "verify-code-placeholder": "Code"
        },
        "reset-password-form": {
          "title": "Reset your Password",
          "subtitle": "Enter your new password.",
          "reset": "Reset"
        }
      }
    }
  },
  "layout": {
    "header": {
      "app-title": "EzStart",
      "nav-links": ["Home", "Docs"]
    },
    "footer": {
      "copyright": "Copyright Â© 2024. All rights reserved.",
      "owner": "Designed & Coded by "
    },
    "user-menu": {
      "settings": "Settings"
    }
  },
  "pages": {
    "home": {
      "page-title": "Home",
      "page-description": "Welcome to EzStart!",
      "sections": {
        "hero": {
          "title": "EzStart",
          "description": "EZ Start is a Boilerplate that provides a comprehensive and flexible starting point for your web development projects. Built with modern technologies and best practices, it helps you kickstart your development process with a robust foundation.",
          "cta": "Get Started",
          "github": "Star on GitHub"
        },
        "features": {
          "title": "Features",
          "subtitle": "Built your next powerfull app with ",
          "description": "These features are already available and integrated for all users of this boilerplate. If only certain features interest you, you can find them in the application documentation. The documentation is currently being written; if you need more information, don't hesitate to contact me.",
          "content": [
            {
              "title": "Cutting-Edge Stack",
              "description": "Leverage the power of Next.js 14 to build your applications. Ez-start employs TypeScript, Tailwind CSS, Prisma ORM, and more to provide a modern and efficient development environment. Stay ahead with the latest web technologies, best practices, and optimized SEO.",
              "link": "/",
              "image": "StackSvg"
            },
            {
              "title": "Secure Authentication",
              "description": "Implement secure authentication in your application using Auth.js, the latest version of Next-Auth.js. This allows for integration with various providers such as Google and GitHub, ensuring flexible and secure user authentication and account management.",
              "link": "authentication",
              "image": "SecureSvg"
            },
            {
              "title": "Global Reach with i18n",
              "description": "Expand your application's reach globally with Next-Intl for seamless localization. This setup enables you to manage translations effortlessly and cater to a diverse audience by breaking language barriers.",
              "link": "internationalization",
              "image": "GlobalSvg"
            },
            {
              "title": "Efficient Database Management",
              "description": "Integrate Prisma for simplified and efficient database management. Generate automatic migrations, access type-safe data, and ensure compatibility with PostgreSQL, SQLite, and MySQL.",
              "link": "db-management",
              "image": "DbSvg"
            },
            {
              "title": "Rich Component Library",
              "description": "Galvanized by the components of shadcn/ui to create dynamic and accessible user interfaces. This boilerplate includes custom components designed to fully integrate translation with Next-Intl for effortless internationalization.",
              "link": "components",
              "image": "ComponentSvg"
            },
            {
              "title": "Payment with Stripe",
              "description": "Integration of secure payment with Stripe for smooth and reliable transaction management. This upcoming implementation will allow users to make secure payments, with full support for major credit cards and popular payment methods.",
              "link": "payment",
              "image": "PaymentSvg"
            }
          ]
        },
        "get-started": {
          "title": "Get Started",
          "cta": "Get Started",
          "github": "Star on GitHub",
          "content": [
            "To get started with EzStart Boilerplate, click the 'Get Started' button above and follow the setup instructions. Customize the configuration files to suit your project needs and start building your application with ease.",
            "This boilerplate is designed to be flexible and extensible, allowing you to add features and modify existing ones to meet your specific requirements."
          ]
        }
      }
    },
    "docs": {
      "title": "EzStart Documentation",
      "description": "Comprehensive guide and reference for using EzStart. Learn how to leverage the features and components of EzStart to streamline your development process.",
      "sections": {
        "primary-dependencies": {
          "title": "Primary Dependencies",
          "description": "You can find below the primary dependencies used in this boilerplate and their official documentation.",
          "framework": "Framework",
          "orm": "ORM",
          "authentication": "Authentication",
          "styling": "Styling",
          "forms": "Forms",
          "internationalization": "Internationalization"
        }
      },
      "nav-links": {
        "get-started": "Get Started",
        "dev-tools": "Developer Tools",
        "components": "Components",
        "internationalization": "Internationalization",
        "authentication": "Authentication",
        "db-management": "Database Management"
      },
      "get-started": {
        "title": "Get Started with EzStart",
        "description": "EzStart is a boilerplate designed to quickly kickstart your Next.js projects with advanced integrated features.",
        "sections": {
          "nav-links": {
            "installation": "Installation",
            "setup-env": "Setup Environment",
            "environment-variables": "Environment Variables",
            "start": "Start",
            "primary-dependencies": "Primary Dependencies"
          },
          "installation": {
            "title": "Installation",
            "steps": "git clone https://github.com/DFranck/my-ez-start.git\ncd my-ez-start\nnpm install"
          },
          "setup-env": {
            "title": "Setup environment",
            "steps": "DATABASE_URL=`postgresql://username:password@localhost:5432/mydatabase`\nAUTH_URL=http://localhost:3000\nAUTH_SECRET=your_secret_key\nAUTH_SALT=your_salt\nGOOGLE_CLIENT_ID=YOUR_GOOGLE_CLIENT_ID\nGOOGLE_CLIENT_SECRET=YOUR_GOOGLE_CLIENT_SECRET\nGITHUB_CLIENT_ID=YOUR_GITHUB_CLIENT_ID\nGITHUB_CLIENT_SECRET=YOUR_GITHUB_CLIENT_SECRET\nMAILJET_API_SECRET=YOUR_MAILJET_API_SECRET\nMAILJET_API_KEY=YOUR_MAILJET_API_KEY"
          },
          "environment-variables": {
            "title": "Environment Variables",
            "steps": [
              {
                "name": "DATABASE_URL",
                "description": "The connection string for your PostgreSQL database. You can find this in your database service dashboard.",
                "link": "https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING"
              },
              {
                "name": "AUTH_URL",
                "description": "The base URL of your authentication service. Typically this is your application's URL.",
                "link": "https://authjs.dev/docs/getting-started/introduction"
              },
              {
                "name": "AUTH_SECRET",
                "description": "A secret key for encrypting JWT tokens. Generate a random key using crypto or another method.",
                "code": "node -e `console.log(require('crypto').randomBytes(32).toString('hex'))`"
              },
              {
                "name": "AUTH_SALT",
                "description": "A salt for hashing passwords. Generate a random salt using crypto or another method.",
                "code": "node -e `console.log(require('crypto').randomBytes(32).toString('hex'))`"
              },
              {
                "name": "GOOGLE_CLIENT_ID",
                "description": "Your Google OAuth client ID. You can find this in the Google Developer Console.",
                "link": "https://console.developers.google.com/"
              },
              {
                "name": "GOOGLE_CLIENT_SECRET",
                "description": "Your Google OAuth client secret. You can find this in the Google Developer Console.",
                "link": "https://console.developers.google.com/"
              },
              {
                "name": "GITHUB_CLIENT_ID",
                "description": "Your GitHub OAuth client ID. You can find this in the GitHub Developer settings.",
                "link": "https://github.com/settings/developers"
              },
              {
                "name": "GITHUB_CLIENT_SECRET",
                "description": "Your GitHub OAuth client secret. You can find this in the GitHub Developer settings.",
                "link": "https://github.com/settings/developers"
              },
              {
                "name": "MAILJET_API_SECRET",
                "description": "Your Mailjet API secret key. You can find this in the Mailjet account settings.",
                "link": "https://app.mailjet.com/account/api_keys"
              },
              {
                "name": "MAILJET_API_KEY",
                "description": "Your Mailjet API key. You can find this in the Mailjet account settings.",
                "link": "https://app.mailjet.com/account/api_keys"
              }
            ]
          },
          "start": {
            "title": "Start development",
            "steps": "npm run dev"
          },
          "enjoy": {
            "title": "Enjoy!",
            "description": "You can enjoy now or take a look the documentation of this boilerplate."
          }
        }
      },
      "dev-tools": {
        "title": "Developer Tools",
        "description": "A collection of tools to assist developers in efficiently managing and enhancing their projects. If you start with EZ Start, you can use these tools to enhance your development experience without confusing yourself, if not you can find configuration options in the 'Developer Tools' section.",
        "items": {
          "update-app-name": {
            "title": "Update App Name",
            "description": "Tool to update the app name across various files",
            "files": {
              "title": "Files concerned",
              "description": "The following files will be concerned:",
              "code-links": {
                "updateAppName.js": "https://github.com/DFranck/my-ez-start/blob/master/updateAppName.js",
                "package.json": "https://github.com/DFranck/my-ez-start/blob/master/package.json",
                "README.md": "https://github.com/DFranck/my-ez-start/blob/master/README.md",
                "src/app/[locale]/layout.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/app/[locale]/layout.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Automatic updates in critical files like <code>package.json</code>, <code>README.md</code>, and translation files.",
                "Simple configuration to define the new application name and paths to be updated.",
                "Robust handling of string replacements to ensure all instances of the old name are updated."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use & run the script:",
              "steps": [
                {
                  "step-title": "Provide new name",
                  "step-description": "Replace <code>newAppName</code> with the new application name in the <code>updateAppName.js</code> file.",
                  "step-code": "const newAppName = \"EzStart - The Ultimate Boilerplate for Modern Web Development\"; // Replace with the desired name\nconst oldAppName = \"Your Application Name\"; // Replace with the current name of the application in the README"
                },
                {
                  "step-title": "Run script",
                  "step-description": "Run the script using Node.js: <code>node updateAppName.js</code>.",
                  "step-code": "node updateAppName.js"
                }
              ],
              "language": "bash"
            }
          }
        }
      },
      "components": {
        "title": "Components",
        "description": "Components for developers",
        "items": {
          "nav": {
            "title": "Navigation",
            "description": "A versatile navigation component for developers, designed to handle dynamic links and paths effortlessly. It supports translation, dynamic paths, and different layouts for various navigation needs.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/components/layout/nav.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/components/layout/nav.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Supports dynamic link generation based on translation keys or direct links array/object.",
                "Responsive design with different layouts (row and column) for various screen sizes.",
                "Automatic active link highlighting based on the current pathname.",
                "Customizable through various props including custom classes, variants, and direction (row or column)."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the Nav component:",
              "steps": [
                {
                  "step-title": "Basic Usage",
                  "step-description": "Import the Nav component and use it in your layout.",
                  "step-code": "import Nav from \"@/components/layout/nav\";\n\nconst MyLayout = () => {\n  return (\n    <div>\n      <Nav \n        t=\"pages.docs\" \n        render=\"nav-links\" \n        path=\"docs\" \n        active \n        variant=\"primary\" \n        dir=\"col\" \n        pos=\"fixed\" \n        navClass=\"my-custom-nav-class\" \n        ulClass=\"my-custom-ul-class\" \n        liClass=\"my-custom-li-class\" \n      />\n    </div>\n  );\n};\n\nexport default MyLayout;"
                },
                {
                  "step-title": "Using Direct Links",
                  "step-description": "You can also provide direct links instead of using translation keys.",
                  "step-code": "import Nav from \"@/components/layout/nav\";\n\nconst MyLayout = () => {\n  const links = [\"Home\", \"About\", \"Contact\"];\n  return (\n    <div>\n      <Nav \n        links={links} \n        path=\"\" \n        active \n        variant=\"primary\" \n        dir=\"row\" \n        pos=\"default\" \n        navClass=\"my-custom-nav-class\" \n        ulClass=\"my-custom-ul-class\" \n        liClass=\"my-custom-li-class\" \n      />\n    </div>\n  );\n};\n\nexport default MyLayout;"
                }
              ],
              "language": "typescript"
            }
          },
          "section": {
            "title": "Section",
            "description": "A flexible section component for wrapping content with optional background image and additional styling.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/components/layout/section.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/components/layout/section.tsx"
              }
            },
            "features": {
              "title": "Features",
              "content": [
                "Allows wrapping of content with additional styling and layout options.",
                "Supports background images with customizable size, repeat, and position.",
                "Optional id for linking to specific sections within a page."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the Section component:",
              "steps": [
                {
                  "step-title": "Basic Usage",
                  "step-description": "Import the Section component and use it to wrap your content.",
                  "step-code": "import Section from \"@/components/layout/section\";\n\nconst MyComponent = () => {\n  return (\n    <Section className=\"my-custom-class\" id=\"my-section\">\n      <h1>My Section</h1>\n      <p>This is a section with custom styling.</p>\n    </Section>\n  );\n};\n\nexport default MyComponent;"
                },
                {
                  "step-title": "Using Background Image",
                  "step-description": "You can also provide a background image to the Section component.",
                  "step-code": "import Section from \"@/components/layout/section\";\n\nconst MyComponent = () => {\n  return (\n    <Section bgImg=\"/path/to/image.jpg\" className=\"my-custom-class\" id=\"my-section\">\n      <h1>My Section</h1>\n      <p>This is a section with a background image.</p>\n    </Section>\n  );\n};\n\nexport default MyComponent;"
                }
              ],
              "language": "typescript"
            }
          },
          "carousel3d": {
            "title": "3D Carousel",
            "description": "A 3D Carousel component that displays rotating images or content in a 3D space. Supports keyboard navigation and pausing on hover.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/components/carousel3d.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/components/carousel3d.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "Carousel3D",
              "target": "src/components/carousel-3d.tsx"
            },
            "features": {
              "title": "Features",
              "content": [
                "Supports rotating images or content in a 3D space.",
                "Keyboard navigation for accessibility.",
                "Option to pause rotation on hover.",
                "Customizable number of items and content via props."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the Carousel3D component:",
              "steps": [
                {
                  "step-title": "Basic Usage",
                  "step-description": "Import the Carousel3D component and use it to display rotating images.",
                  "step-code": "import Carousel3D from \"@/components/carousel3d\";\n\nconst MyComponent = () => {\n  return (\n    <Carousel3D imgNum={5} stopOnHover={true}>\n      <img src=\"/path/to/image1.jpg\" alt=\"Image 1\" />\n      <img src=\"/path/to/image2.jpg\" alt=\"Image 2\" />\n      <img src=\"/path/to/image3.jpg\" alt=\"Image 3\" />\n    </Carousel3D>\n  );\n};\n\nexport default MyComponent;"
                }
              ],
              "language": "typescript"
            }
          }
        }
      },
      "internationalization": {
        "title": "Internationalization",
        "description": "Internationalization for developers",
        "items": {
          "intl-middleware": {
            "title": "Intl Middleware",
            "description": "Middleware for handling internationalization and setting the current locale.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/middlewares/intl-middleware.ts": "https://github.com/DFranck/my-ez-start/blob/master/src/middlewares/intl-middleware.ts"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Handles locale detection and redirection.",
                "Sets the current locale based on the request URL.",
                "Integrates with Next.js middleware."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the intl middleware:",
              "steps": [
                {
                  "step-title": "Create Middleware",
                  "step-description": "Create the middleware in `src/middlewares/intl-middleware.ts`.",
                  "step-code": "import { locales } from \"@/i18n\";\nimport createMiddleware from \"next-intl/middleware\";\nimport { NextRequest } from \"next/server\";\n\nconst defaultLocale = \"en\";\nexport let currentLocale = defaultLocale;\nexport const intlMiddleware = createMiddleware({\n  locales,\n  defaultLocale,\n});\n\nexport default function middleware(req: NextRequest) {\n  const response = intlMiddleware(req);\n  const pathname = req.nextUrl.pathname;\n  currentLocale = locales.find((loc) => pathname.startsWith(`/${loc}`)) || defaultLocale;\n  return response;\n}\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n};"
                }
              ],
              "language": "typescript"
            }
          },
          "language-provider": {
            "title": "Language Provider",
            "description": "A provider component to manage language settings and messages.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/providers/language-provider.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/providers/language-provider.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Wraps the application with language settings.",
                "Uses `next-intl` for internationalization.",
                "Provides language messages to the entire application."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the LanguageProvider component:",
              "steps": [
                {
                  "step-title": "Create LanguageProvider",
                  "step-description": "Create the provider in `src/providers/language-provider.tsx`.",
                  "step-code": "import { AbstractIntlMessages, NextIntlClientProvider } from \"next-intl\";\nconst LanguageProvider = ({ children, messages }: { children: React.ReactNode; messages: AbstractIntlMessages; }) => {\n  return (\n    <NextIntlClientProvider messages={messages}>\n      {children}\n    </NextIntlClientProvider>\n  );\n};\nexport default LanguageProvider;"
                }
              ],
              "language": "typescript"
            }
          },
          "root-layout": {
            "title": "Root Layout",
            "description": "The root layout component that includes Providers for theme, auth, and language.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/app/layout.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/app/layout.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Integrates theme, auth, and language providers.",
                "Sets up global styles and fonts.",
                "Handles metadata generation based on locale."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the Root Layout component:",
              "steps": [
                {
                  "step-title": "Create Root Layout",
                  "step-description": "Create the root layout in `src/app/layout.tsx`.",
                  "step-code": "import Footer from \"@/components/layout/footer/footer\";\nimport Header from \"@/components/layout/header/header\";\nimport Main from \"@/components/layout/main\";\nimport { cn } from \"@/lib/utils\";\nimport Providers from \"@/providers/providers\";\nimport { getMessages } from \"next-intl/server\";\nimport { Inter } from \"next/font/google\";\nimport \"../globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\nexport async function generateMetadata({ params: { locale } }: any) {\n  const messages = (await getMessages(locale)) as any;\n  const metaTitle = messages.app[\"meta-title\"] as string;\n  const metaDescription = messages.app[\"meta-description\"].replace(/\\{meta-title\\}/g, metaTitle) as string;\n  return {\n    title: metaTitle,\n    description: metaDescription,\n  };\n}\nexport default async function RootLayout({ children, params: { locale } }: Readonly<{ children: React.ReactNode; params: { locale: string }; }>) {\n  const messages = await getMessages();\n  return (\n    <html lang={locale} suppressHydrationWarning={true} className=\"h-full\">\n      <body className={cn(inter.className, \"min-h-screen flex flex-col h-full\")}>\\n        <Providers messages={messages}>\n          <Header />\n          <Main>{children}</Main>\n          <Footer />\n        </Providers>\n      </body>\n    </html>\n  );\n}"
                }
              ],
              "language": "typescript"
            }
          },
          "locale-switcher": {
            "title": "Locale Switcher",
            "description": "A component for switching between different locales in the application.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/components/locale-switcher.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/components/locale-switcher.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Displays a dropdown for selecting the locale.",
                "Updates the application URL to reflect the selected locale.",
                "Handles keyboard navigation and accessibility."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the LocaleSwitcher component:",
              "steps": [
                {
                  "step-title": "Create LocaleSwitcher",
                  "step-description": "Create the component in `src/components/locale-switcher.tsx`.",
                  "step-code": "import { cn } from \"@/lib/utils\";\nimport { GlobeIcon } from \"lucide-react\";\nimport { useLocale, useTranslations } from \"next-intl\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useEffect, useRef, useState, useTransition } from \"react\";\n\nconst LocaleSwitcher = () => {\n  const t = useTranslations(\"locale\");\n  const [isMounted, setIsMounted] = useState(false);\n  const [isPending, startTransition] = useTransition();\n  const [isOpen, setIsOpen] = useState(false);\n  const router = useRouter();\n  const pathname = usePathname();\n  const localeActive = useLocale();\n  const liStyle = \"py-2 px-4 cursor-pointer hover:bg-accent text-sm\";\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const dropdownRef = useRef<HTMLUListElement>(null);\n  const content = t.raw(\"language\") as { [key: string]: string };\n  const languages = Object.entries(content);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const onValueChange = (nextLocale: string) => {\n    const newPath = pathname.replace(localeActive, nextLocale);\n    startTransition(() => {\n      router.push(newPath);\n    });\n    setIsOpen(false);\n  };\n\n  const handleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      event.preventDefault();\n      handleOpen();\n    } else if (event.key === \"Escape\") {\n      setIsOpen(false);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (\n      dropdownRef.current &&\n      !dropdownRef.current.contains(event.relatedTarget as Node)\n    ) {\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && dropdownRef.current) {\n      dropdownRef.current.focus();\n    }\n  }, [isOpen]);\n  if (!isMounted) {\n    return null;\n  }\n  return (\n    <div\n      className=\"relative text-foreground opacity-60 hover:opacity-100\"\n      onBlur={handleBlur}\n    >\n      <button\n        ref={buttonRef}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen}\n        className=\"cursor-pointer hover:bg-accent rounded w-9 h-9 flex justify-center items-center\"\n        onClick={handleOpen}\n        onKeyDown={handleKeyDown}\n      >\n        <GlobeIcon className=\"w-6 h-6\" />\n        <p className=\"sr-only\">switch language</p>\n      </button>\n      {isOpen && (\n        <ul\n          ref={dropdownRef}\n          tabIndex={-1}\n          className={cn(\n            \"absolute top-10 right-0 z-10 bg-background border shadow rounded animate-fadeIn duration-200\"\n          )}\n        >\n          {languages.map(([key, value]) => (\n            <li\n              key={key}\n              className={liStyle}\n              onClick={() => onValueChange(key)}\n              role=\"menuitem\"\n              tabIndex={0}\n              onKeyDown={(e) => e.key === \"Enter\" && onValueChange(key)}\n            >\n              {value}\n            </li>\n          ))}\n          <div className=\"border border-border/50\"></div>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default LocaleSwitcher;"
                }
              ],
              "language": "typescript"
            }
          }
        }
      },
      "authentication": {
        "title": "Authentication",
        "description": "Authentication for developers",
        "items": {
          "auth-provider": {
            "title": "Auth Provider",
            "description": "Provider for handling user authentication and session management.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/providers/auth-provider.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/providers/auth-provider.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Handles user authentication and session management.",
                "Integrates with various authentication providers like Google and GitHub.",
                "Utilizes NextAuth for robust authentication."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the AuthProvider component:",
              "steps": [
                {
                  "step-title": "Basic Usage",
                  "step-description": "Wrap your application with the AuthProvider component.",
                  "step-code": "import { AuthProvider } from '@/providers/auth-provider';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return (\n    <AuthProvider>\n      <Component {...pageProps} />\n    </AuthProvider>\n  );\n};\n\nexport default MyApp;"
                }
              ],
              "language": "typescript"
            }
          },
          "auth-middleware": {
            "title": "Auth Middleware",
            "description": "Middleware for handling access control based on authentication status.",
            "files": {
              "title": "Files concerned",
              "description": "The following file will be concerned:",
              "code-links": {
                "src/middleware/auth-middleware.ts": "https://github.com/DFranck/my-ez-start/blob/master/src/middleware/auth-middleware.ts"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Controls access to routes based on authentication status.",
                "Redirects unauthorized users to the sign-in page.",
                "Allows customization of paths and access rules."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to configure and use the auth middleware:",
              "steps": [
                {
                  "step-title": "Basic Configuration",
                  "step-description": "Set up the auth middleware in your Next.js project.",
                  "step-code": "import { authMiddleware } from '@/middleware/auth-middleware';\n\nexport default function middleware(req) {\n  return authMiddleware(req);\n}"
                }
              ],
              "language": "typescript"
            }
          },
          "auth-schemas": {
            "title": "Auth Schemas",
            "description": "Validation schemas for authentication forms using Zod.",
            "files": {
              "title": "Files concerned",
              "description": "The following files will be concerned:",
              "code-links": {
                "src/schemas/auth-schemas.ts": "https://github.com/DFranck/my-ez-start/blob/master/src/schemas/auth-schemas.ts"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Validates sign-in and sign-up forms.",
                "Provides detailed error messages for form validation.",
                "Ensures data integrity and security."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the validation schemas:",
              "steps": [
                {
                  "step-title": "Basic Usage",
                  "step-description": "Import and use the schemas in your form components.",
                  "step-code": "import { signInSchema, signUpSchema } from '@/schemas/auth-schemas';\n\nconst SignInForm = () => {\n  const form = useForm({\n    resolver: zodResolver(signInSchema),\n  });\n  // ...form implementation\n};"
                }
              ],
              "language": "typescript"
            }
          },
          "auth-forms": {
            "title": "Authentication Forms",
            "description": "Components for sign-in, sign-up, and other authentication-related forms.",
            "files": {
              "title": "Files concerned",
              "description": "The following files will be concerned:",
              "code-links": {
                "src/features/auth/sign-in-form.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/features/auth/sign-in-form.tsx",
                "src/features/auth/sign-up-form.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/features/auth/sign-up-form.tsx",
                "src/features/auth/forgot-form.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/features/auth/forgot-form.tsx",
                "src/features/auth/verify-code-form.tsx": "https://github.com/DFranck/my-ez-start/blob/master/src/features/auth/verify-code-form.tsx"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Pre-built components for sign-in and sign-up forms.",
                "Integration with NextAuth for authentication.",
                "Form validation using Zod."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to use the authentication forms:",
              "steps": [
                {
                  "step-title": "Sign-In Form",
                  "step-description": "Import and use the SignInForm component.",
                  "step-code": "import SignInForm from '@/features/auth/sign-in-form';\n\nconst SignInPage = () => {\n  return <SignInForm />;\n};\n\nexport default SignInPage;"
                },
                {
                  "step-title": "Sign-Up Form",
                  "step-description": "Import and use the SignUpForm component.",
                  "step-code": "import SignUpForm from '@/features/auth/sign-up-form';\n\nconst SignUpPage = () => {\n  return <SignUpForm />;\n};\n\nexport default SignUpPage;"
                }
              ],
              "language": "typescript"
            }
          }
        }
      },

      "db-management": {
        "title": "Database Management",
        "description": "Database management for developers using Prisma ORM.",
        "items": {
          "prisma-setup": {
            "title": "Prisma Setup",
            "description": "Setup and configuration of Prisma ORM for database management.",
            "files": {
              "title": "Files concerned",
              "description": "The following files will be concerned:",
              "code-links": {
                "src/lib/db.ts": "https://github.com/DFranck/my-ez-start/blob/master/src/lib/db.ts",
                "prisma/schema.prisma": "https://github.com/DFranck/my-ez-start/blob/master/prisma/schema.prisma"
              }
            },
            "display": {
              "title": "Display",
              "component": "",
              "target": ""
            },
            "features": {
              "title": "Features",
              "content": [
                "Setup Prisma Client for database interactions.",
                "Configuration for PostgreSQL database connection.",
                "Prevents multiple instances of Prisma Client in development.",
                "Defines a basic User model for demonstration."
              ]
            },
            "example-usage": {
              "title": "Example Usage",
              "description": "Here's how to set up and use Prisma in your project:",
              "steps": [
                {
                  "step-title": "Install Prisma and Initialize",
                  "step-description": "Install Prisma and initialize it in your project.",
                  "step-code": "npm install prisma @prisma/client\nnpx prisma init"
                },
                {
                  "step-title": "Configure Prisma Client",
                  "step-description": "Create a Prisma client instance for database interactions.",
                  "step-code": "// src/lib/db.ts\nimport { PrismaClient } from '@prisma/client';\n\n// Prevent multiple instances of Prisma Client in development\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = db;\n}"
                },
                {
                  "step-title": "Define Database Schema",
                  "step-description": "Define your database schema in the `prisma/schema.prisma` file.",
                  "step-code": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  password  String\n  name      String?\n  resetCode String?  @unique\n  resetCodeExpiresAt DateTime?\n  role      String   @default(\"user\")\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}"
                },
                {
                  "step-title": "Run Prisma Migrate",
                  "step-description": "Run Prisma migrate to create the database schema.",
                  "step-code": "npx prisma migrate dev --name init"
                },
                {
                  "step-title": "Using Prisma Client",
                  "step-description": "Use the Prisma client instance to interact with the database.",
                  "step-code": "// Example usage in a Next.js API route\nimport { db } from '@/lib/db';\n\nexport default async function handler(req, res) {\n  const users = await db.user.findMany();\n  res.status(200).json(users);\n}"
                }
              ],
              "language": "typescript"
            }
          }
        }
      }
    }
  }
}
